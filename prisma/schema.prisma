// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      String   @default("user")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model NovelGenre {
  id          String      @id @default(cuid())
  name        String      
  description String?
  template    String?     // 改为 String 类型，存储 LLM 生成的文本模板
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // 父级分类
  parent      NovelGenre?  @relation("GenreHierarchy", fields: [parentId], references: [id])
  parentId    String?
  
  // 子级分类
  children    NovelGenre[] @relation("GenreHierarchy")
  
  // 小说关联
  novels      Novel[]
  
  // 确保同一父级下的分类名称唯一
  @@unique([parentId, name])

  characterTemplate CharacterTemplate?
}

model Novel {
  id          String      @id @default(cuid())
  title       String
  description String?
  genreId     String?
  genre       NovelGenre? @relation(fields: [genreId], references: [id])
  coverImage  String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  authorId    String
  status      String      @default("draft")
  outline     String?
  structuredOutline String?
  chapters    Chapter[]
  characters  Character[]

  @@map("novels")
}

model Chapter {
  id        String   @id @default(uuid())
  title     String
  content   String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  novelId   String
  novel     Novel    @relation(fields: [novelId], references: [id])

  @@map("chapters")
}

model Character {
  id          String   @id @default(cuid())
  name        String
  role        String
  personality String
  background  String
  development String
  novelId     String
  novel       Novel    @relation(fields: [novelId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  baseCharacterId String?
  baseCharacter   BaseCharacter? @relation(fields: [baseCharacterId], references: [id])

  @@index([novelId])
  @@index([baseCharacterId])
}

model APIKey {
  id        String   @id @default(uuid())
  provider  String
  key       String
  model     String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String

  @@unique([provider, userId])
  @@map("api_keys")
}

// 基础角色模型
model BaseCharacter {
  id          String      @id @default(cuid())
  name        String
  role        String
  personality String
  background  String
  development String
  appearance  String      @default("") // 外貌描述
  weaknesses  String      @default("") // 弱点与不足
  interests   String      @default("") // 兴趣爱好
  keyEvents   String      @default("") // 重要事件
  tags        String      // 用于存储标签，以逗号分隔
  category    String      // 角色分类，如：主角、反派、配角等
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  characters  Character[] // 关联到具体小说中的角色

  @@map("base_characters")
}

// 角色模板
model CharacterTemplate {
  id          String      @id @default(cuid())
  genreId     String      @unique  // 与小说类型一对一关联
  genre       NovelGenre  @relation(fields: [genreId], references: [id])
  template    Json        // 存储角色模板字段定义
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("character_templates")
}

model World {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String
  background  String?
  cultures    String?
  geography   String?
  magicSystem String?
  politics    String?
  races       String?
  religions   String?
  technology  String?
  conflicts   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("worlds")
}

// 世界属性库 - 存储用户创建的世界属性
model WorldPropertyLibrary {
  id          String   @id @default(cuid())
  name        String
  description String
  category    String   @default("general")
  worldType   String   // 属性来源的世界类型
  usageCount  Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("world_property_library")
}

// 标题库模型 - 存储用户保存的标题
model TitleLibrary {
  id          String   @id @default(cuid())
  title       String
  description String?   // 可选的标题描述
  clickRate   Int?      // 存储预估的点击率
  keywords    String?   // 生成标题时使用的关键词
  genreId     String?   // 关联的小说类型
  userId      String    // 关联的用户ID
  usedCount   Int       @default(0) // 使用次数
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([userId])
  @@index([genreId])
  @@map("title_libraries")
}

// 写作公式模型 - 存储提取的写作风格和公式
model WritingFormula {
  id                String   @id @default(cuid())
  name              String
  sourceText        String   // 原始文本
  genre             String   // 体裁/类型
  style             String   // 整体风格
  toneVoice         String   // 语气/语调
  structure         String   // 整体结构
  pacing            String   // 节奏控制
  paragraphPattern  String   // 段落模式
  sentenceStructure String   // 句式结构
  vocabularyLevel   String   // 词汇水平
  rhetoricalDevices String   // 修辞手法，以JSON字符串存储
  narrativeMode     String   // 叙事模式
  perspectivePoint  String   // 视角/人称
  characterVoice    String   // 角色声音
  themes            String   // 主题元素，以JSON字符串存储
  motifs            String   // 意象/符号，以JSON字符串存储
  emotionalTone     String   // 情感基调
  uniqueFeatures    String   // 独特特征，以JSON字符串存储
  formulaDescription String   // 公式描述
  formulaSteps      String   // 公式步骤，以JSON字符串存储
  applicationTips   String   // 应用技巧，以JSON字符串存储
  userId            String   // 关联的用户ID
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([userId])
  @@map("writing_formulas")
}
